1.AppDelegate.h =>
	#import "InstantPudding.h"
	@class InstantPudding;
	
	InstantPudding *_pdca;
2.AppDelegate.m =>
	_pdca=[[InstantPudding alloc] init];

3.UpdateData2PDCA =>
NSString *_errMsg=@"NA";
NSString *version=[_pdca GetIPVersion];
NSLog(@"InstantPudding vers:%@",version);

if (NO == [_pdca IPStart])
{
_errMsg = @"IPStart error";
NSLog(@"pdca net error");
return false;
}
NSLog(@"IPStart1 ok");

NSString *SN=@"YM123456789";
if (NO == [_pdca ValidateSerialNumber:SN])
{
_errMsg=@"Validate SN error";
NSLog(@"pdca sn error");
return false;
}
/*
NSLog(@"Validate SN ok");
if(NO ==[_pdca IPamIOkay:SN])
{
NSLog(@"IPamIOKay error");
return false;
}
NSLog(@"IPamIOKay done");
*/
if (NO == [_pdca AddIPAttribute:@"serialnumber" Value:SN]) {
_errMsg=@"Add SN error";
NSLog(@"SN error");
return false;
}
NSLog(@"AddIPAttribute SN ok");

if(NO == [_pdca AddIPAttribute:@"softwarename" Value:@"Pudding"])
{
_errMsg=@"Add softwarename error";
NSLog(@"softwarename error");
return false;
}
NSLog(@"AddIPAttribute software ok");

//NSString *_swVersion=@"1.0.0";
if(NO == [_pdca AddIPAttribute:@"softwareversion" Value:@"1.1.93"])
{
_errMsg=@"Add softwareversion error";
NSLog(@"softwareversion error");
return false;
}
NSLog(@"AddIPAttribute softwareversion ok");

BOOL bResult = NO;
[_pdca IPDoneWithResult:bResult];

NSLog(@"pdca done");
return true;
}

//pdca
-(BOOL)sendData2PDCA
{
    _errMsg=@"NA";
    if (NO == [_pdca IPStart])
    {
        _errMsg = @"IPStart error";
        NSLog(@"pdca net error");
        return false;
    }
    
    //NSString *_strSN = @"DLC503501JPG2DV4J";
    //NSLog(@"SN:%@",_strSN);
    
    if (NO == [_pdca ValidateSerialNumber:_snString])
    {
        _errMsg=@"Validate SN error";
        NSLog(@"pdca sn error");
        return false;
    }
    
    if (NO == [_pdca AddIPAttribute:@"serialnumber" Value:_snString]) {
        _errMsg=@"Add SN error";
        NSLog(@"SN error");
        return false;
    }
    //NSString *_swName=@"B390 Manual FCT TEST";
    if(NO == [_pdca AddIPAttribute:@"softwarename" Value:_swName])
    {
        _errMsg=@"Add softwarename error";
        NSLog(@"softwarename error");
        return false;
    }
    //NSString *_swVersion=@"1.0.0";
    if(NO == [_pdca AddIPAttribute:@"softwareversion" Value:_swVersion])
    {
        _errMsg=@"Add softwareversion error";
        NSLog(@"softwareversion error");
        return false;
    }
    /*
     if(NO == [_pdca AddIPAttribute:@"computerName" Value:_strComputerName])
     {
     _errMsg=@"Add computerName error";
     NSLog(@"computerName error");
     return false;
     }
     */
    
    NSString *_strStationID=[self GetGHDValueWithKey:@"STATION_ID"];
    if(NO == [_pdca AddIPAttribute:@"stationid" Value:_strStationID])
    {
        _errMsg=@"Add fixtureid error";
        NSLog(@"fixtureid error");
        return false;
    }
    NSString *_strStartTime=[self getCurrentTime];
    [_pdca SetStartTime:[self converTime2Stamp:_strStartTime]];
    
    
    if(false == [self sendTestItem2PDCA])
    {
        _errMsg=@"sendTestItem2PDCA error";
        NSLog(@"sendTestItem2PDCA error");
        return false;
    }
    
    /*
     
     if(NO ==[_pdca addBlobFile:_swName logFileName:strFileName])
     {
     _errMsg=@"sendLog2PDCA error";
     NSLog(@"sendLog2PDCA error");
     return false;
     }
     */
    BOOL bResult = NO;
    //NSString *_strResult=@"PASS";
    if ([_testResult isEqualToString:@"PASS"]) bResult=YES;
    [_pdca IPDoneWithResult:bResult];
    
    return true;
}
-(BOOL)sendTestItem2PDCA
{
    NSString *strName;
    NSString *strValue;
    NSString *strLowerLimit;
    NSString *strUpperLimit;
    NSString *strUnit;
    
    for (int i=1; i<[_testValuesArr count]; i++) {
        if ([[_groupData objectAtIndex:i] isEqualToString:@"PDCA"]) {
            strName=[_commandsData objectAtIndex:i];
            strValue=[_testValuesArr objectAtIndex:i];
            strLowerLimit=[_lowData objectAtIndex:i];
            strUpperLimit=[_upData objectAtIndex:i];
            strUnit=[_unitsData objectAtIndex:i];
            NSLog(@"item:%@ v:%@ l:%@ u:%@ un:%@",strName,strValue,strLowerLimit,strUpperLimit,strUnit);
            if ([strName isEqualToString:@"Dotara_check_ok"]) {
                if(NO == [_pdca AddIPAttribute:strName Value:strValue])
                {
                    _errMsg=@"Add Dotara_check_ok error";
                    NSLog(@"add Dotara_check_ok error");
                    return false;
                }
                continue;
            }
             if(false == [_pdca AddIPTestItem:strName TestValue:strValue LowerLimit:strLowerLimit UpperLimit:strUpperLimit Priority:IP_PRIORITY_REALTIME_WITH_ALARMS Units:strUnit])
             {
                 return false;
             }
        }
    }
    
    return true;
}
-(NSString *)GetGHDValueWithKey:(NSString *)key{
    //NSString *path = @"/vault/data_collection/test_station_config/gh_station_info.json";
    NSString *path=_gh_file;
    //创建NSFileManager实例
    NSFileManager *fm = [NSFileManager defaultManager];
    //判断文件是否存在
    if([fm fileExistsAtPath:path]==NO){
        [self performSelectorOnMainThread:@selector(showAlertViewWarning:) withObject:@"gh_station_info.json file not exists!" waitUntilDone:NO];
        NSLog(@"gh_station_info.json file not exists!");
        return @"";
    }else{
        NSLog(@"file exists");
    }
    //初始化文件路径。
    //NSString* path  = [[NSBundle mainBundle] pathForResource:@"gh_station_info" ofType:@"json"];
    NSLog(@"path:%@",path);
    //将文件内容读取到字符串中，注意编码NSUTF8StringEncoding 防止乱码
    NSString* jsonString = [[NSString alloc] initWithContentsOfFile:path encoding:NSUTF8StringEncoding error:nil];
    //NSLog(@"jsonString:%@",jsonString);
    //将字符串写到缓冲区。
    NSData* jsonData = [jsonString dataUsingEncoding:NSUTF8StringEncoding];
    //解析json数据，使用系统方法 JSONObjectWithData:  options: error:
    NSDictionary* dic = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingMutableLeaves error:nil];
    //接下来一步一步parse
    NSDictionary* dicResult =[dic objectForKey:@"ghinfo"];
    NSString *value=[dicResult objectForKey:key];
    //NSString *sfcUOP = [dicResult objectForKey:@"SFC_QUERY_UNIT_ON_OFF"];
    //NSString *sfcURL = [dicResult objectForKey:@"SFC_URL"];
    //NSString *stationID = [dicResult objectForKey:@"STATION_ID"];
    //NSString *stationID=[dicResult objectForKey:@"STATION_NUMBER"];
    //NSLog(@"sfcUOP:%@ sfcURL:%@ stationID:%@",sfcUOP,sfcURL,stationID);
    
    return value;
}

-(BOOL)checkRouterWithSN:(NSString *)strSN
{
    //    strStation = @"ITKS_A02-2FAP-01_3_CON-OQC";
    static BOOL bResult = false;
    //创建信号量,实现同步请求
    dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);
    
    NSURLSession *session=[NSURLSession sharedSession];
    //第一步，创建URL
    //第一步，创建URL
    NSString *strUrl = _mesURL;//[self GetGHDValueWithKey:@"SFC_URL"];
    [self logUpdate:strUrl];
    //NSString *urlString=@"http://10.37.66.2:8005/LuxShare_QualityTestService.aspx";
    //第二步，创建请求
    NSMutableURLRequest *request=[NSMutableURLRequest requestWithURL:[NSURL URLWithString:strUrl]];
    
    [request setHTTPMethod:@"POST"];
    [request setTimeoutInterval:5.0f];
    //request.HTTPMethod=@"GET";
    //NSString *strData = [NSString stringWithFormat:@"c=QUERY_RECORD&sn=%@&StationID=%@&cmd=QUERY_PANEL", strSN, strStation];
    NSString *strStation=[self GetGHDValueWithKey:@"STATION_ID"];
    //strStation=[strStation componentsSeparatedByString:@"_SMT"][0];
    
    NSString *strBody =[_mesBODY stringByReplacingOccurrencesOfString:@"{STID}" withString:strStation];
    strBody=[strBody stringByReplacingOccurrencesOfString:@"{SN}" withString:strSN];
    //[NSString stringWithFormat:@"c=QUERY_RECORD&p=unit_process_check&tsid=%@&sn=%@", _mesStationID,strSN];
    [request setHTTPBody:[strBody dataUsingEncoding:NSUTF8StringEncoding]];
    [self logUpdate:strBody];
    //第三步，连接服务器
    NSString static *strReceivedData;
    NSURLSessionDataTask *task=[session dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
        strReceivedData = [[NSString alloc]initWithData:data encoding:NSUTF8StringEncoding];
        strReceivedData=[strReceivedData stringByReplacingOccurrencesOfString:@";" withString:@"\r\n"];
        NSString *strError=[NSString stringWithFormat:@"error:%@",error];
        NSLog(@"%@",strError);
        if(![strError isEqual:@"error:(null)"]) {
            dispatch_async(dispatch_get_main_queue(), ^{
                //通知主线程更新
                [self logUpdate:strError];
                [self showAlertViewWarning:@"Connect to network error!"];
            });
            
            bResult = false;
        }else{
            NSString *strSubStr = @"unit_process_check=";
            if([strReceivedData containsString:strSubStr])
            {
                NSRange rang = [strReceivedData rangeOfString:strSubStr];
                NSString *strMsg = [strReceivedData substringFromIndex:(rang.location + rang.length)];
                if([strMsg isEqualToString:@"OK"])
                {
                    bResult = true;
                }
                else
                {
                    NSString *strErrMsg = @"";
                    strSubStr = @"UNIT OUT OF PROCESS ";
                    rang = [strMsg rangeOfString:strSubStr];
                    strErrMsg = [strMsg substringFromIndex:(rang.location + rang.length)];
                    dispatch_async(dispatch_get_main_queue(), ^{
                        //通知主线程更新
                        [self showAlertViewWarning:strErrMsg];
                    });
                    
                    bResult = false;
                }
            }
            else
            {
                dispatch_async(dispatch_get_main_queue(), ^{
                    //通知主线程更新
                    [self showAlertViewWarning:[NSString stringWithFormat:@"Response error:%@",strReceivedData]];
                });
                
                bResult = false;
            }
        }
        
        dispatch_async(dispatch_get_main_queue(), ^{
            //通知主线程更新
            [self logUpdate:strReceivedData];
        });
        
        //NSLog(@"%@",strReceivedData);
        //发送 signal
        dispatch_semaphore_signal(semaphore);
    }];
    
    [task resume];
    //等待(阻塞线程)
    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);
    
    NSLog(@"task finish");
    return bResult;
}
- (void)showAlertViewWarning:(NSString *)strWarning
{
    NSAlert *alert = [[NSAlert alloc] init];
    [alert addButtonWithTitle:@"OK"];
    [alert setMessageText:strWarning];
    [alert setAlertStyle:NSAlertStyleWarning];
    [alert runModal];
}
